const Chance = require('chance');
const moment = require('moment');

// console.log(timelines);

const data = (c, timelines) => {
  const profession = c.profession();

  let timecnt = 0;
  const getTime = (next = false) => {
    if (next) timecnt++;
    return timelines[timecnt];
  };

  const workHistory = () => {
    return {
      company: c.company(),
      location: c.city(),
      type: c.bool() ? 'permanent' : 'contract',
      duration: `${moment(getTime()).format('DD MMM YYYY')} ~ ${
        moment(getTime(true)).format('DD MMM YYYY')
      }`,
      title: profession,
      field: c.sentence({words:3}),
      achievements: [
        c.sentence({ words:13 }),
        c.sentence({ words:13 }),
        c.sentence({ words:13 }),
        c.sentence({ words:13 }),
      ].slice(0, c.integer({ min: 0, max: 3})),
      skills: [
        c.word(),
        c.word(),
        c.word(),
        c.word(),
        c.word(),
        c.word(),
        c.word(),
        c.word(),
        c.word(),
        c.word(),
      ].slice(0, c.integer({min:3, max: 9})),
    };
  };

  const author = c.name();

  return {
    header: {
      author,
      title: 'Resume',
      description: 'sample seed data generated by seed',
      paragraphs: [
        { source: 'profile', title: '$name' },
        { source: 'workHistory', title: 'Work History', first: 6, digestRest: true },
        { source: 'educationHistory', title: 'Education', first: 4 },
        { source: 'language', title: 'language' },
      ],
    },

    data: {
      profile: {
        name: author,
        title: profession,
        email: c.email(),
        address: c.address(),
        phone: c.phone(),
        carrierSummary: {
          default: c.sentence() + ' ' + c.sentence(),
          frontend: c.sentence() + ' ' + c.sentence(),
        },
        technicalSkills: {
          programmingLanguages: [
            `${c.syllable()}lang`,
            `${c.syllable()}lang`,
            `${c.syllable()}lang`,
          ],
          generalOfficeSkills:  [
            c.word(),
            c.word(),
            c.word(),
            c.word(),
            c.word(),
            c.word(),
            c.word(),
          ],
        },
      },
      workHistory: [
        workHistory(),
        workHistory(),
        workHistory(),
        workHistory(),
        workHistory(),
      ],
      educationHistory: [
        {
          institute: c.city()+' University',
          major: profession+' Engineering',
          location: c.city()+', '+c.country(),
          duration: moment(timelines[timecnt]).format('MMM YYYY'),
          title: 'Bachelor of Engineering',
          acquisition: timecnt++ && moment(timelines[timecnt]).format('MMM YYYY'),
        },
      ],
      language: [
        c.animal()+'ese',
        c.animal()+'ese',
        c.animal()+'ese',
      ],
    },
  };
};

const generateSeed = (seed = 'resume-generator-seed-1', now = new Date()) => {
  const c = new Chance(seed);
  const year = now.getYear() + 1900;
  const times = Array(20)
    .fill(null)
    .map(_ => c.year({ min: year-30, max: year }))
    .map(year => c.date({year}))
    .sort((a,b) => b-a);
  return data(c, times);
}

// console.log(yaml.dump(data));
if (process.argv[2] === __filename) {
  (async () => {
    const fs = require('fs');
    const { promisify } = require('util');
    const yaml = require('js-yaml');

    const writeFile = promisify(fs.writeFile);
    const d = generateSeed();
    await writeFile('sample.yml', yaml.dump(d));
  })();
}

module.exports = generateSeed;
